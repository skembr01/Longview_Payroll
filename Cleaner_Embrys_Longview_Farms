#Embry's Longview update with cleaner code
name = input()
name = name.lower()
if name == 'ross' or 'matt':
    gross = int(input('weekly wage: '))
else:
    hours = input(hours)
employee = Employee(name, hours)
employee.hourly_output()

class Employee(name, hours):
    def __init__(self, name, hours) -> None:
        super().__init__()
        self.name = name
        self.hours = hours
    def federal_withhold(gross):
        if 75 <= gross < 265:
            cycles = int((gross - 75) / 15)
            value = 0
            for i in range(0, cycles + 1):
                value += 1
        elif 265 <= gross < 340:
            cycles = int((gross - 265) / 15)
            value = 19
            for i in range(0, cycles + 1):
                if i % 4 == 0:
                    value += 1
                elif i % 4 != 0:
                    value += 2
        elif 340 <= gross < 850:
            cycles = int(((gross - 265) / 15) - 4)
            value = 27
            for i in range(1, cycles + 1):
                if i % 5 == 0:
                    value += 1
                elif i % 5 != 0:
                    value += 2
        return value
    def employee(self, name):
        if name == 'josh' or name == 'lucas':
            return self.hourly_output(1, 10)
        elif name == 'mike':
            return self.hourly_output(2, 10)
        elif name == 'amanda':
            return self.hourly_output(3, 9)
        elif name == 'ross' or 'matt':
            return self.salary_output(gross)
    def hourly_output(self, emp_id, wage):
        gross = round((self.hours * wage), 2)
        ss = round((gross * 0.062), 2)
        medicare = round((gross * 0.0145), 2)
        ky_withhold = round((((int(gross / 10) - 5) * 0.5) + 0.20), 2)
        fed_withhold = round(self.federal_withhold(gross), 2)
        if self.emp_id == 2:
            child_support = 58.20
            net = round(gross - (ss + medicare + ky_withhold + fed_withhold + child_support), 2)
            return ('gross pay: ' + str(gross) + '\n' + ('ss: ' + str(ss)) + '\n' + ('medicare: ' + str(round(medicare, 5)) + '\n' + ('ky withhold: ' + str(ky_withhold)) + '\n' + ('fed withhold: ' + str(fed_withhold)) + '\n' + ('child support: ' + str(child_support)) + '\n' + ('net pay: ' + str(net))))
        else:
            net = round((gross - (ss + medicare + ky_withhold + fed_withhold)), 2)
            return ('gross pay: ' + str(gross) + '\n' + ('ss: ' + str(ss)) + '\n' + ('medicare: ' + str(round(medicare, 5)) + '\n' + ('ky withhold: ' + str(ky_withhold)) + '\n' + ('fed withhold: ' + str(fed_withhold)) + '\n' + ('net pay: ' + str(net))))
    def salary_output(self, gross):
        ss = round((gross * 0.062), 2)
        medicare = round((gross * 0.0145), 2)
        ky_withhold = round((((int(gross / 10) - 5) * 0.5) + 0.20), 2)
        fed_withhold = round(self.federal_withhold(gross), 2)
        net = round((gross - (ss + medicare + ky_withhold + fed_withhold)), 2)
        return ('gross pay: ' + str(gross) + '\n' + ('ss: ' + str(ss)) + '\n' + ('medicare: ' + str(round(medicare, 5)) + '\n' + ('ky withhold: ' + str(ky_withhold)) + '\n' + ('fed withhold: ' + str(fed_withhold)) + '\n' + ('net pay: ' + str(net))))




            
            



        

name = input(name)
name = name.lower()
if name == 'ross' or 'matt':
    gross = int(input('weekly wage: '))
else:
    hours = input(hours)
employee = Employee(name, hours)
employee.hourly_output()